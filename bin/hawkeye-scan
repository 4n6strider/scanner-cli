#!/usr/bin/env node
const Scan = require('../lib/scan');
const logger = new require('../lib/logger')();
const fs = require('fs');
const SummaryWriter = require('../lib/writers/summary');
const JsonWriter = require('../lib/writers/json');
const path = require('path');
const Modules = require('../lib/modules');

let writers = [new SummaryWriter()];
let modules = [];
let program = require('commander');
program
  .option('-a, --all', 'Scan all files, regardless if a git repo is found')
  .option('-f, --fail-on <low, medium, high, critical>', 'Set the level at which hawkeye returns non-zero status codes (defaults to low)', val => {
    if(['low', 'medium', 'high', 'critical'].indexOf(val) === -1) {
      logger.error('Please specify either low, medium, high or critical!');
      process.exit(1);
    }
    return val;
  })
  .option('-t, --target  </path/to/project>', 'The location to scan, usually the project root')
  .option('-m, --module  <module name>', 'Run specific module.  Can be specified multiple times', (val) => {
    modules.push(val);
  })
  .option('-j, --json    </path/to/summary,json>', 'Write JSON output to file.  Can be specified multiple times', val => {
    writers.push(new JsonWriter({
      path: val
    }));
  })
  .parse(process.argv);

if(modules.length === 0) { modules.push('all') };
let scan = new Scan({
  target: program.target,
  all: program.all || false
});

let bitwise = {
  low: 1,
  medium: 2,
  high: 4,
  critical: 8
};

program.failOn = program.failOn || 'low';
logger.log('Fail on limit set to', program.failOn);

scan.start(modules, (err, results) => {
  let total = 0;
  let exitCode = 0;
  results.forEach(moduleResult => {
    Object.keys(moduleResult.results).forEach(key => {
      let levelResults = moduleResult.results[key].length;
      if(levelResults > 0 && bitwise[key] >= bitwise[program.failOn]) { exitCode = 1 };
      total = total + levelResults;
    });
  });
  logger.log('scan complete, ' + total + ' issues found');
  console.log('');
  writers.forEach(writer => {
    writer.write(results);
  });
  if(total > 0) {
    process.exit(exitCode);
  }
});
