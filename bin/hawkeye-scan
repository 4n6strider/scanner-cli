#!/usr/bin/env node
'use strict';
const Scan = require('../lib/scan');
const logger = new require('../lib/logger')();
const ConsoleWriter = require('../lib/writers/console');
const JsonWriter = require('../lib/writers/json');
const SumoWriter = require('../lib/writers/sumologic');
const async = require('async');
const Rc = require('../lib/rc');

const writers = [new ConsoleWriter()];
const program = require('commander');
const rc = new Rc();
const util = require('../lib/util');

const addJsonWriter = path => {
  writers.push(new JsonWriter({
    path: path
  }));
};

const addSumoWriter = url => {
  writers.push(new SumoWriter({
    url: url
  }));
};

program
  .option('-a, --all',
          'Scan all files, regardless if a git repo is found')
  .option('-t, --target  </path/to/project>',
          'The location to scan, usually the project root')
  .option('-f, --fail-on <low, medium, high, critical>',
          'Set the level at which hawkeye returns non-zero status codes (defaults to low)', rc.withFailOn)
  .option('-m, --module  <module name>',
          'Run specific module.  Can be specified multiple times', rc.withModule)
  .option('-e, --exclude <pattern>',
          'Specify one or more exclusion patterns (eg. test/*)', rc.withExclude)
  .option('-j, --json    </path/to/summary,json>',
          'Write JSON output to file.  Can be specified multiple times', addJsonWriter)
  .option('-s, --sumo    <http://sumologic-http-connector>>',
          'Write the vulnerabilities to SumoLogic', addSumoWriter)
  .parse(process.argv);


const bitwise = {
  low: 1,
  medium: 2,
  high: 4,
  critical: 8
};

rc.failOn = util.defaultValue(program.failOn, 'low');
rc.all = util.defaultValue(program.all, false);
rc.withTarget(program.target);

const scan = new Scan(rc);

scan.start((err, results) => {
  let total = 0;
  let exitCode = 0;
  results.forEach(moduleResult => {
    Object.keys(moduleResult.results).forEach(key => {
      const levelResults = moduleResult.results[key].length;
      if(levelResults > 0 && bitwise[key] >= bitwise[rc.failOn]) { exitCode = 1 }
      total = total + levelResults;
    });
  });
  logger.log('scan complete, ' + total + ' issues found');
  console.log('');
  async.eachSeries(writers, (writer, next) => {
    logger.log('Doing writer:', writer.key);
    writer.write(results, err => {
      if(err) { logger.error(err.message); }
      next();
    });
  }, err => {
      if(err) { logger.error(err.message); }
    logger.log('Scan complete');
    if(total > 0) {
      process.exit(exitCode);
    }
  });
});
